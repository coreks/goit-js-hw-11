{"version":3,"sources":["js/theme.js","js/timer.js","index.js"],"names":["refs","bodyEl","document","querySelector","btnStart","btnStop","getRandomHexColor","Math","floor","random","toString","onBtnStartClick","color","setInterval","style","backgroundColor","removeEventListener","opacity","addEventListener","clearInterval","Timer","constructor","selector","targetDate","days","hours","minutes","seconds","getMs","Date","parse","now","renderTimerData","textContent","pad","timerStart","diffMs","convertMs","console","log","ms","hour","minute","second","value","String","padStart","timer"],"mappings":";;;AAAA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,QAC/BC,SAAUF,SAASC,cAAc,gBACjCE,QAASH,SAASC,cAAc,gBAGlC,SAASG,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAK3D,SAASC,IACPC,MAAQC,YAAY,IACVb,EAAKC,OAAOa,MAAMC,gBAAkBT,IAC3C,KAECN,EAAKI,WACPJ,EAAKI,SAASY,oBAAoB,QAASL,GAC3CX,EAAKI,SAASU,MAAMG,QAAU,OATlCjB,EAAKI,SAASc,iBAAiB,QAASP,GAaxCX,EAAKK,QAAQa,iBAAiB,QAAS,KACrCC,cAAcP,OACVZ,EAAKK,UACPL,EAAKI,SAASc,iBAAiB,QAASP,GACxCX,EAAKI,SAASU,MAAMG,QAAU;;AClBlC,MAAMG,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBA,KAAAA,WAAaA,EACbD,KAAAA,SAAWA,EAGXtB,KAAAA,KAAO,CACVwB,KAAMtB,SAASC,iBAAiB,KAAKmB,wBACrCG,MAAOvB,SAASC,iBAAiB,KAAKmB,yBACtCI,QAASxB,SAASC,iBAAiB,KAAKmB,2BACxCK,QAASzB,SAASC,iBAAiB,KAAKmB,4BAI5CM,QAGSL,OAFYM,KAAKC,MAAM,KAAKP,YAChBM,KAAKE,MAI1BC,iBAAgB,KAAER,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,IACjC3B,KAAAA,KAAKwB,KAAKS,YAAcT,EACxBxB,KAAAA,KAAKyB,MAAMQ,YAAcC,EAAIT,GAC7BzB,KAAAA,KAAK0B,QAAQO,YAAcC,EAAIR,GAC/B1B,KAAAA,KAAK2B,QAAQM,YAAcC,EAAIP,GAGtCQ,aACOhB,KAAAA,cAAgBN,YAAY,KACzBuB,MAAAA,EAAS,KAAKR,SACd,KAAEJ,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,GAAYU,EAAUD,GACpDE,QAAQC,IAAI,CAAEf,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,EAASC,QAAAA,IAC/BK,KAAAA,gBAAgB,CAAER,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,EAASC,QAAAA,KAC5C,MAIP,SAASU,EAAUG,GAgBV,MAAA,CAAEhB,KARIjB,KAAKC,MAAMgC,EAHZC,OAWGhB,MANDlB,KAAKC,MAAOgC,EALdC,MADCC,MAYShB,QAJNnB,KAAKC,MAAQgC,EAPjBC,MADCC,KADEC,KAagBhB,QAFfpB,KAAKC,MAASgC,EATlBC,MADCC,KADEC,IADA,MAiBjB,SAAST,EAAIU,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnC,MAAMC,EAAQ,IAAI3B,EAAM,CAAEE,SAAU,SAAUC,WAAY,iBAI1De,QAAQC,IAAIQ,GACZA,EAAMnB,QACNmB,EAAMZ;;ACzEN,aAFA,QAAA,oBACA,QAAA,iBACA,QAAA","file":"src.eaf47b09.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  bodyEl: document.querySelector('body'),\n  btnStart: document.querySelector('[data-start]'),\n  btnStop: document.querySelector('[data-stop]'),\n};\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nrefs.btnStart.addEventListener('click', onBtnStartClick);\n\nfunction onBtnStartClick() {\n  color = setInterval(() => {\n    return (refs.bodyEl.style.backgroundColor = getRandomHexColor());\n  }, 1000);\n\n  if (refs.btnStart) {\n    refs.btnStart.removeEventListener('click', onBtnStartClick);\n    refs.btnStart.style.opacity = '0.5';\n  }\n}\n\nrefs.btnStop.addEventListener('click', () => {\n  clearInterval(color);\n  if (refs.btnStop) {\n    refs.btnStart.addEventListener('click', onBtnStartClick);\n    refs.btnStart.style.opacity = '1';\n  }\n});\n","// import Swal from 'sweetalert2';\n\n// Swal.fire({\n//   title: 'Error!',\n//   text: 'Do you want to continue',\n//   icon: 'error',\n//   confirmButtonText: 'Cool',\n// });\n\nclass Timer {\n  constructor({ selector, targetDate }) {\n    this.targetDate = targetDate;\n    this.selector = selector;\n    // this.timerNode = document.querySelector(selector);\n    // console.log(this.timerNode);\n    this.refs = {\n      days: document.querySelector(`${this.selector},[data-days]`),\n      hours: document.querySelector(`${this.selector},[data-hours]`),\n      minutes: document.querySelector(`${this.selector},[data-minutes]`),\n      seconds: document.querySelector(`${this.selector},[data-seconds]`),\n    };\n  }\n\n  getMs() {\n    const targetDate = Date.parse(this.targetDate);\n    const currenDate = Date.now();\n    return targetDate - currenDate;\n  }\n\n  renderTimerData({ days, hours, minutes, seconds }) {\n    this.refs.days.textContent = days;\n    this.refs.hours.textContent = pad(hours);\n    this.refs.minutes.textContent = pad(minutes);\n    this.refs.seconds.textContent = pad(seconds);\n  }\n\n  timerStart() {\n    this.clearInterval = setInterval(() => {\n      const diffMs = this.getMs();\n      const { days, hours, minutes, seconds } = convertMs(diffMs);\n      console.log({ days, hours, minutes, seconds });\n      this.renderTimerData({ days, hours, minutes, seconds });\n    }, 1000);\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nconst timer = new Timer({ selector: '#timer', targetDate: '2021, 07, 19' });\n\n// this.days = document.querySelector(`${selector} .value[data-value ='days']`);\n\nconsole.log(timer);\ntimer.getMs();\ntimer.timerStart();\n","import './sass/main.scss';\nimport './js/theme.js';\nimport './js/timer.js';\n"]}